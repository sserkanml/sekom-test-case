name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: todo-app

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sserkanml_sekom-test-case
            -Dsonar.organization=sserkanml
            -Dsonar.sources=todo-app

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd todo-app
          pip install -r requirements.txt
          pip freeze > installed_requirements.txt

      - name: Run Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=todo-app/installed_requirements.txt --package-manager=pip --severity-threshold=high --skip-unresolved

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build-and-push:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Scan Docker image and filesystem for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'  
          scan-ref: '.'
          format: 'table'
          output: 'trivy-fs-results.txt'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          
      - name: Scan Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'todo-app/Dockerfile'
          format: 'table'
          output: 'trivy-dockerfile-results.txt'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd todo-app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Scan built image
          trivy image $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-fs-results.txt
            trivy-dockerfile-results.txt
          retention-days: 90

  generate-security-report:
    needs: [security-checks, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: trivy-results

      - name: Create Security Report
        if: always()
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          
          echo "## SonarCloud Results" >> security-report.md
          echo "For SonarCloud results, visit: https://sonarcloud.io/project/overview?id=sserkanml_sekom-test-case" >> security-report.md
          
          echo "## Snyk Vulnerability Results" >> security-report.md
          echo "Snyk scan results:" >> security-report.md
          
          echo "## Trivy Filesystem Scan Results" >> security-report.md
          if [ -f trivy-fs-results.txt ]; then
            echo "\`\`\`" >> security-report.md
            cat trivy-fs-results.txt >> security-report.md
            echo "\`\`\`" >> security-report.md
          else
            echo "No filesystem scan results found" >> security-report.md
          fi
          
          echo "## Trivy Dockerfile Scan Results" >> security-report.md
          if [ -f trivy-dockerfile-results.txt ]; then
            echo "\`\`\`" >> security-report.md
            cat trivy-dockerfile-results.txt >> security-report.md
            echo "\`\`\`" >> security-report.md
          else
            echo "No Dockerfile scan results found" >> security-report.md
          fi

      - name: Archive Final Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${EC2_HOST}:~/docker-compose.yml
          
          ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} "
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY}
            aws configure set aws_secret_access_key ${AWS_SECRET_KEY}
            aws configure set region ${AWS_REGION}
            
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            
            export ECR_REGISTRY=${ECR_REGISTRY}
            export IMAGE_TAG=${{ github.sha }}
            
            docker compose down
            
            docker compose up -d

            docker compose ps
            
            docker compose logs
          "