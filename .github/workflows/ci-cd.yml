name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: todo-app

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sserkanml_sekom-test-case
            -Dsonar.organization=sserkanml
            -Dsonar.sources=todo-app

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd todo-app
          pip install -r requirements.txt
          pip freeze > installed_requirements.txt

      - name: Run Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=todo-app/installed_requirements.txt --package-manager=pip --severity-threshold=high --skip-unresolved

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build-and-push:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'todo-app/Dockerfile'
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd todo-app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Scan built image
          trivy image $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
  generate-security-report:
    needs: [security-checks, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Create Security Report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "### Trivy Scan Results" >> security-report.md
          cat trivy-results.txt >> security-report.md
          echo "### OWASP ZAP Scan Results" >> security-report.md
          cat zap-scan.html >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v2
        with:
          name: security-report
          path: security-report.md

      - name: Archive Trivy results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.txt